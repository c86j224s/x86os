2010-07-24-SAT : FAT16 파일시스템의 /boot 파일을 로드하여 메모리에 적재 후 실행시키는MBR 부트로더 작성.
2010-07-30-FRI-1 : /boot 파일 내에 어셈블리로 커널 로더를 작성하기 시작. 32bit전환 코드를 작성했고, 메모리 크기를 알아내는 부분을 작성했다. 파일 이름들을 살짝 수정했다.
2010-07-31-SAT-1 : /boot 파일의 소스를 16비트 부분과 32비트 부분으로 나누고, 각 모듈별로 파일 이름을 나눴다.
2010-07-31-SAT-2 : Makefile을 구조적으로 정리. /boot 커널로더를 어셈블리와 C 부분으로 각각 나누고, C 부분에서 커널 로딩을 담당하도록. 하드디스크에 대한 Programmed I/O 이해. 디렉토리를 구조적으로 정리. C 커널로더가 커널을 성공적으로 로딩.
2010-08-02-MON-1 : /boot 커널 로더의 IDE 접근 방법에 존재하던 오류 수정.
2010-08-02-MON-2 : 일부 파일명을 바꾸고, 디렉토리 정리. 32비트 모드로 진입. 극히 단순한 lock을 짜봤는데 이게 제대로 동작할지를 모르겠다. 컬러 텍스트 모드에서의 문자 출력을 짜고 있는 중이다.
2010-08-02-MON-3 : 커서 이동 부분을 video index register를 조작해서 진짜 커서를 이동하게 하는 것으로 수정했다. vsprintf 함수를 직접 만드는 중이다. 표준 라이브러리를 쓰면 좋겠지만.. 커널 쪽에서 쓰기도 그렇고, 아직은 한계가 있다.
2010-08-04-WED-1 : printf 함수를 대충 만들었다. 정말 대충. 아마 기존에 쓰던대로 막 쓰면 안되는게 꽤 많을 것. 그리고 라이브러리에 기본 libgcc.a를 추가했다. 나누기와 나머지 연산이 C 기본 연산이 아니더군-_-;;;
2010-08-05-THU-1 : IDT 설정과 인터럽트 서비스 루틴의 윤곽을 잡았다.
2010-08-14-SAT-1 : 커널 메모리 배치 구조를 정리하고, 이를 kernel/addr.h에 선언했다. 커널 내부에 진입하면 스택을 초기화하도록 변경했다. 물리 메모리를 4K씩 할당(?)하도록 함수를 만들었다. 페이지를 할당하고 해제하는 함수를 만들었는데, 현재 단계에서는 잘 돌아갈거라고 보장하기 힘들다.
2010-08-17-TUE-1 : 페이징을 켰다. 페이지 단위로는 할당을 하겠는데, 그 이상은 아직 못하겠다. 메모리풀을 만들어야 되는데, 아직은 힘들 것 같다. 메모리풀을 만드는 일은, 진짜 세상을 하나 처음부터 끝까지 만드는 것 같은 일이다. (리눅스 0.01 버전도 malloc 함수가 들어 있지 않았다는 데서 위안을.)
2010-08-18-WED-1 : 페이지 여러개를 한번에 연속해서 할당하는 alloc_multiple_pages, free_multiple_pages 함수를 프로토타입만 선언해놨다. task.h만 만들었다.
2010-08-18-WED-2 : 메모리 채움, 복사 함수를 kernel/util.h에 만들었다. CRT 스크롤을 위한 준비다. 
2010-08-18-WED-3 : CRT를 아래 방향으로 스크롤되도록 만들었다.
2010-08-18-WED-4 : 멀티 태스킹을 만들고 있다. 컨텍스트 스위칭이 안되는데 원인을 못찾겠다. 태스크를 만들 때 페이지 디렉토리만 관리하고 엔트리 테이블은 조작하지 않는 실수가 존재한다. 
2010-08-19-THU-1 : 멀티 태스킹을 만들었다. 어설프긴 하지만 잘 된다.(감동) 아직은 인터럽트가 걸리기만 하면 무조건 스위칭하도록 만들었다. 태스크 페이지 관리 쪽의 버그 때문에 CPU 컨텍스트만 스위칭하고 있는 한계가 있다. 그리고, 응용 프로그램이 돌아가는 것을 확인하기 위해 간단한 시스템 콜을 시험했다. 아~주 잘된다. 시스템 콜에 대한 설계도 필요할 것 같다.
2010-08-21-SAT-1 : 프로세스마다 독자적인 페이지 디렉토리를 두어서 메모리 문맥 스위칭을 구현하려고 했는데, 페이징에 대한 이해가 부족한 탓에 지금으로서는 어려운 것 같다. 결국, 마구 정신없이 다운되는 코드만 남겨놓고 GG. 첫번째 릴리즈에서는 프로세스 간 메모리 보호에 대해서는 신경쓰지 말아야겠다. ㅜㅜ
2010-09-05-SUN-1 : 화면 디바이스 드라이버를 만들고 있다. 디바이스 드라이버 인터페이스가 참 모양새 없다 허점 투성이에다가..;; 아직 device_crt 모듈과 crt 모듈을 합치지는 않았다. 만들어가면서, device_crt가 crt를 사용하는 모양새가 아니라, device_crt를 crt가 사용하는 모양새가 되게 해야겠다. 이건, 가능하면 내일까지.
2010-09-07-TUE-1 : 화면 디바이스 드라이버 완성 ㅜㅜ. 일단 명칭은 TTY 드라이버이다. 어딘가 허점이 분명히 있겠지만, 그래도 대 만족으로 잘돌아간다. ㅋㅋ 속도가 전보다 많이 빨라졌다. 아주 만족스러움.
2010-09-07-TUE-2 : 키보드 드라이버를 만들었다. 근데 키버퍼를 태스크 쪽에 만들어놓다보니까, 키가 들어갔는지 확인하려면 유저 모드 태스크 쪽에서 값을 읽어봐야 확인이 가능하네;;; 그래서 소프트웨어 인터럽트 쪽에 디바이스 I/O 인터페이스가 꼭 필요하겠다.. 그다지 어려울 것 같진 않은데... 최대한 견고하고 오래 써먹으려면 곯머리 좀 썩힐 듯.
2010-09-11-SAT-1 : 키보드 디바이스 드라이버를 위해서 시스템 콜을 디자인했는데, 정작 코드를 유저레벨로 옮길 수 없어서 실행이 안되는 이 아이러니함 -_-;;;;; IDE 하드디스크 디바이스 드라이버랑 FAT16 파일시스템 지원부터 만들어야 할듯 -_-;;;;
2010-09-11-SAT-2 : 유저레벨에서 시스템콜을 가능하게 하려다가 실패 -_-;; 뭐가 추가되고 바뀌었는지 잘 기억이 안나서 모르겠네. 어쨌든 실행은 되는 거 같은데.
2010-09-12-SUN-1 : IDE 드라이버를 만들려고 파일만 추가해놨다. 내용 만드는 건 자고 일어나서. 파일시스템 지원은 역시 디바이스 드라이버와는 별도로, 하나의 계층을 더 만들어서 해야겠다. 어쩐지 디바이스 드라이버로 한꺼번에 하겠단 생각은 좀 무리였던듯 -_-;;
2010-09-15-TUE-PORTFOLIO-1 : 포트폴리오용 버전의 첫 수정. IDE 드라이버를 날림으로 만듬. -_-;;;
2010-09-20-MON-PORTFOLIO-1 : 날림으로 만들어진 IDE 드라이버 위에 FAT16을 올리는 삽질에 착수. -_-;;; 제대로 돌아갈지는 미궁. 벌써 디바이스드라이버 설계가 헷갈리기 시작한다. 언제 깔끔하게 문서로 정리해야 할텐데;;; fat16의 br을 메모리 상에서 해석하기 위한 구조체를 하나 만들었다.
2010-09-21-TUE-PORTFOLIO-1 : 대충 FAT16 파일시스템의 앞부분 헤더를 읽어오도록 하는데까지 성공했다. read_cluster 함수가 제대로 동작하는지는 확신이 없긴 하다. 절대경로를 계층별 이름-확장자로 파싱하는 함수랑, 페이지를 한꺼번에 여럿 할당하는 함수가 필요하겠다. 그런 후에야 파일과 디렉토리들에 대해서 open, close, read, write, lseek, ioctl, readdir 같은 함수들을 만들 수 있을 것 같다.
2010-09-21-TUE-PORTFOLIO-2 : 절대경로를 파일이름으로 변경하는 함수를 만들었다. 이제 페이지를 여럿 할당하는 함수를 만들면 파일시스템 완성할 준비 완료.
2010-09-21-TUE-PORTFOLIO-3 : 페이지를 여러개 한꺼번에 해제하는 함수(free_multiple_pages) 완료. 페이지를 여러개 한꺼번에 할당하는 함수 (alloc_multiple_pages) 완료. 이제 파일 여는 함수만 만들면 됨. 디렉토리 안에 엔트리가 아무리 많아도 512개이니, 디렉토리를 검색하는데 페이지는 많아봤자 4개 정도만 할당받으면 충분하다.
2010-09-23-THU-PORTFOLIO-1 : 유저레벨 실행파일을 고정된 위치로 읽어오게 했는데, 실행파일 크기가 1페이지만 넘으면 or 문자열을 포함하면 에러가 발생한다. 그리고 스택에 접근해도 문제가 발생한다. -_-;;; 어딘가 잘못 짰는데, 뭘 잘못 알고 있는 건지 잘 모르겠다..
2010-09-23-THU-PORTFOLIO-2 : 태스크 스위칭 시에 스택이 계속 자라나는 문제를 발견했다. -_-;; 딱 17*4(레지스터크기) 만큼만 변하더라는... 분명 태스크 스위칭 문제다. 또, 이상하게 유저레벨 프로그램이 BSS 영역을 가지고 있으면 문제가 발생하더라... 이유를 알 수 없었다..;; 일단 현재까지 진행된 바로는 간단한 텍스트 게임을 만들 수 있는 모든 여건이 다 갖추어졌음...
2010-09-23-THU-PORTFOLIO-3 : 음... TTY 디바이스 드라이버의 속도 문제 때문에 텍스트 프로그램을 게임으로 만들겠다는 생각을 살짝 고민 중이다.. 일단은 유저 레벨 프로그램 소스를 지웠음.;; 
2010-09-30-THU-PORTFOLIO-1 : TTY 디바이스 드라이버 출력 속도 개선이 가능할 것 같다. TTY 드라이버의 커서 갱신을 디바이스 드라이버의 ioctl 옵션으로 바꾸었다.
2010-09-30-THU-PORTFOLIO-2 : 바꾼 TTY 디바이스 드라이버가 동작은 하는 거 같은데.. 딜레이도 잘 안먹고 (왜 예외가 발생하는지 모르겠다..) 스케줄링이 좀 이상해서 원하는 것만큼 빠르게 그려지지 않는다. 그냥 PutChar API 그대로 사용중. 일단 스네이크 게임의 골격은 만들어졌고, 사과를 추가하기 위해서 랜덤 함수를 하나 만들어야 할 듯 싶다.
2010-10-01-FRI-PORTFOLIO-1 : 랜덤함수를 "임시로" 구현했다. 사실 랜덤함수가 랜덤이 아니다 -_-;;; PutChar로 땜빵했더니 너무 느리다.. 커널 스택 에러 문제는 꼭 잡아야 할 것 같다.. 페이지 디렉토리 전환도 만들어야 함. 이 세 개는 꼭 해결해야되는데.
2010-10-01-FRI-PORTFOLIO-2 : 스위칭할 때 타이머에서 TICK을 할당하게 했더니 속도문제도 만족스러워지고 DrawChar 문제가 해결되었다. 덩달아서 스위칭 횟수가 줄어드니까 커널 스택 에러도 한참 뒤로 미뤄진 듯 보인다. -_-;; 그냥 페이지 디렉토리 전환만 만들어놓고 종결해버릴까;;;
2010-10-01-FRI-PORTFOLIO-3 : 스네이크게임 시작과 게임오버 화면을 넣는데 문제 발생. 유저모드에서 반복문을 오래 돌리면 예외가 발생한다. 대체 이게 뭔가 싶은데.. 태스크 스위칭 때문인가 싶기도 하고. 흠.
2010-10-01-FRI-PORTFOLIO-4 : 태스크 스위칭 시 스택이 자라나는 오랜 문제를 드디어 해결했다. 이제 남은 문제는 응용프로그램 페이지 디렉토리 전환하고, 유저모드에서 반복문 오래 돌리면 뻗는 문제. ;;; 생각해보면 반복문 오래 돌리는건 스네이크게임만 하고 있는건 아닌데, 유독 거기서만 문제가 발생하는건지 알 수 없다. ... 조금 더 보니, 역시 반복문 자체의 문제가 아니다. 예외 서비스루틴을 추가하고, 어떤 예외가 발생하나 보니, Page Fault가 발생한다. 이걸 좀 덤프해서 봐야할 것 같은데, 덤프 루틴을 어떻게 짜야 커널과 유저 레벨의 값 모두를 볼 수 있을지 고민이다.
2010-10-02-SAT-PORTFOLIO-1 : exception 걸렸을 때의 커널 스택을 출력하게 했더니 운영체제가 뻗는다. 왜 뻗나 해서 커널 스택의 주소 (esp)를 출력하게 했더니, 왠걸 컨텍스트가 전혀 담기지 않은 모양새다. 0x7ffffc니까.. 컨텍스트가 담기지 않은게 아니라 컨텍스트 저장되는 위치가 잘못된건지도 모르겠다. -_-;;;
2010-10-02-SAT-PORTFOLIO-2 : 문제가 해결된 것은 아니지만, 예외에 빠지면 커널 레지스터 일부를 덤프하는 루틴을 만들었다.
2010-10-02-SAT-PORTFOLIO-3 : 뭘 고쳤는지 모르겠다. -_- 구조체 몇개 __attribute__((__packed__))로 바꿔주고.. user program 쪽에 딜레이 좀 줄여서 일단 돌아가게만 해놨다.. 그래도 좀 하다보면 gp 뜨면서 죽어서.. 알 수 없는 오류들에 슬슬 지겨워진다. CPU에 대해 이해가 너무 부족한건 아닌가 하고.
2010-10-03-SUN-PORTFOLIO-1 : 코드를 고친건 아님. 완성과 함께 릴리즈하려 그랬는데, 포트폴리오 때문에 어쩔 수 없이 호스팅 먼저 하게 됬다. 그래서 간단히 README 파일 만들고 불필요한 파일들을 정리했다. 호스팅 주소는 http://code.google.com/p/ostoy
2010-10-12-TUE-PORTFOLIO-1 : 유저 프로세스별 페이지 디렉토리를 구현하기 위한 계획을 잡았다. 일단 사용될 함수 선언문을 paging.c 파일에 적었다. 나머지는 졸리니 내일 하자꾸나. -_-;;
2010-10-12-TUE-PORTFOLIO-2 : 유저 태스크별로 페이지 디렉토리를 만들어주고.. 페이지 테이블도 만들어주어서, 각각 태스크가 성공적으로 만들어지는 것까지 확인이 되었다. 이제 남은 것은 태스크 스위칭인데, 커널에서 태스크로 넘어가는 순간 페이지 폴트가 일어난다. 현재 의심되는 것은 페이지 디렉토리-엔트리 테이블의 ring 레벨 불일치나, 컨텍스트 스택 초기화가 잘못되거나, 페이지 엔트리 테이블에 물리메모리 페이지 매핑이 잘못된 경우. 어느경우일까나. 덕분에 지금 상태에서는 깔끔하게 Page Fault 에러만 뱉고 뻗어버린다.
2010-10-12-TUE-PORTFOLIO-3 : 페이지 폴트가 나는 것은 태스크 스위칭 전에 인터럽트를 미리 꺼주지 않아 발생하는 문제였음. 이제 에러는 안나는데 유저 프로그램이 돌아가는지 안돌아가는지 모르겠다 -_-;;; 어떻게 확인하지;;;

첫번째 릴리즈까지의 마일스톤 :
	[ O ] FAT16 파일시스템에 기반한 2단계 부트로딩
	[ O ] 보호모드
	[ ? ] 프로세스 기반 태스크 스위칭
	[ O ] 페이징
	[ O ] 범용 디바이스 드라이버 시스템
		[ O ] CRT 디바이스 드라이버 (텍스트 화면)
		[ O ] 키보드 디바이스 드라이버 (가상 콘솔)
		[ O ] IDE 하드디스크 디바이스 드라이버
	[ O ] FAT16 (읽기)
	[ O ] 단순 바이너리 실행파일 적재/실행
	[ O ] 시스템 콜
	[ ? ] 유저 레벨 프로그렘 (스네이크 게임) (프로그램마다 시작위치 다름)

두번째 릴리즈 계획 : 
	[   ] 여러개의 응용 프로그램 (고정된 동일한 시작위치)
	[   ] 가상 메모리 관리 시스템 (페이지 디렉토리 전환)
	[   ] 유저 레벨 쉘
	[   ] 가상 파일 시스템
		[   ] FAT16 (완전 구현)
